/*
 Reference
  - Evondev. Hướng dẫn sử dụng Mixins trong SASS toàn tập. Evondev Blog. https://evondev.com/su-dung-mixins-trong-sass
  - Jamie Wright. (2016, April 26th). 10 Sass (SCSS) mixins you should be using in your projects. Engage. https://engageinteractive.co.uk/blog/top-10-scss-mixins
  - Rahul. (2018, December 18th). 13 Must-have SASS Mixins for Web Designers. W3bits. https://w3bits.com/sass-mixins
 */

@mixin font-face(
  $font-name,
  $font-url,
  $font-format: 'truetype',
  $font-fallback-url: null,
  $font-fallback-format: 'truetype',
  $font-weight: 400,
  $font-style: normal
) {
  @font-face {
    font-family: $font-name;
    font-weight: $font-weight;
    font-style: $font-style;

    @if $font-fallback-url !=null {
      src: url($font-url) format($font-format),
        url($font-fallback-url) format($font-fallback-format);
    } @else {
      src: url($font-url) format($font-format);
    }
  }
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Set opacity for element
/// @example
///     @include opacity(.4);
/// @output
///     {
///       opacity: .4;
///       filter: alpha(opacity = 40);
///     }
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/// Retina image
/// Show the retina images on retina-friendly devices only
/// @param {string} $image-path - The path to the image.
/// @param {unitless} $width - The width, default is `100px`.
/// @param {unitless} $height - The height, default is `$width`.
/// @example
///     @include retina("img/logo.png", 100px, 21px);
/// @output
///     .logo {
///       background-image: url("img/logo.png");
///     }
///
///     @media (min--moz-device-pixel-ratio: 1.3),
///     (-o-min-device-pixel-ratio: 2.6 / 2),
///     (-webkit-min-device-pixel-ratio: 1.3),
///     (min-device-pixel-ratio: 1.3),
///     (min-resolution: 1.3dppx) {
///       .logo {
///         /* Serving HQ image on Retina display */
///         background-image: url("img/logo@2x.png");
///         background-size: 100px 21px;
///       }
///     }
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin center-absolute($pos: 'both') {
  position: absolute;
  @if $pos == 'both' {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $pos == 'left' {
    left: 50%;
    transform: translateX(-50%);
  } @else if $pos == 'top' {
    top: 50%;
    transform: translateY(-50%);
  }
}

@mixin gradient($start-color, $end-color, $orientation: 'vertical') {
  background: $start-color;

  @if $orientation== 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation== 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(
      center,
      ellipse cover,
      $start-color,
      $end-color
    );
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

@mixin boxShadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    box-shadow: inset $top $left $blur $color;
  } @else {
    box-shadow: $top $left $blur $color;
  }
}

@mixin transform($transform-function) {
  -webkit-transform: $transform-function;
  -ms-transform: $transform-function;
  transform: $transform-function;
}

@mixin border-radius(
  $all: null,
  $top-left: $all,
  $top-right: $all,
  $bot-left: $all,
  $bot-right: $all
) {
  border-top-left-radius: $top-left;
  border-top-right-radius: $top-right;
  border-bottom-right-radius: $bot-right;
  border-bottom-left-radius: $bot-left;
}

@mixin media-query($breakpoint, $type: 'min') {
  @media only screen and (#{$type}-width: $breakpoint) {
    @content;
  }
}

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}
